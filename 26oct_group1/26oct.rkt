#lang racket

(define (take n lst)
  (cond ((zero? n) '())
        ((>= n (length lst)) lst)
        (else (cons (car lst) (take (- n 1) (cdr lst))))
        )
  )

(define (drop n lst)
  (cond ((zero? n) lst)
        ((>= n (length lst)) '())
        (else (drop (- n 1) (cdr lst)))
        )
  )

(define (all? p? lst)
  (or (null? lst)
      (and (p? (car lst)) (all? p? (cdr lst)))
      )
  )

(define (any? p? lst)
  (and (not (null? lst))
       (or (p? (car lst) (all? p? (cdr lst))))
       )
  )

(define (zip l1 l2)
  (if (or (null? l1) (null? l2))
      '()
      (cons (cons (car l1) (car l2)) (zip (cdr l1) (cdr l2)))
      )
  )

(define (zipWith op l1 l2)
  (if (or (null? l1) (null? l2))
      '()
      (cons (op (car l1) (car l2)) (zipWith op (cdr l1) (cdr l2)))
      )
  )

(define (sorted? lst)
  (or (> 2 (length lst))
      (and (<= (car lst) (cadr lst))
           (sorted? (cdr lst))
           )
      )
  )

(define (uniques lst)
  (define (is-in l elem)
    (and (not (null? l))
         (or
          (equal? elem (car l))
          (is-in (cdr l) elem)
          )
         )
    )
  (cond ((> 2 (length lst)) lst)
        ((not(is-in (cdr lst) (car lst)))
         (cons (car lst) (uniques (cdr lst))))
        (else (uniques (cdr lst)))
        )
  )

(define (insert val lst)
  (cond ((null? lst) (list val))
        ((<= val (car lst)) (cons val lst))
        (else (cons (car lst) (insert val (cdr lst))))
        )
  )

(define (insertion-sort l)
  (if (< (length l) 1)
      l
      (insert (car l) (insertion-sort (cdr l)))
      )
  )

(define (is-subset i1 i2)
  (and (>= (car i1) (car i2))
       (<= (cdr i1) (cdr i2))
       )
  )

(define (is-real-subset i1 i2)
  (and (is-subset i1 i2)
       (or (< (car i1) (car i2))
           (> (cdr i1) (cdr i2))
           )
       )
  )

(define (i-length i)
  (- (cdr i) (car i))
  )

(define (largest-interval l)
  (define (max-i a b)
    (if (> (i-length a) (i-length b)) a b))
  (cond ((< (length l) 2) (car l))
        (else (max-i
               (car l)
               (largest-interval (cdr l))))     
        )
  )

(define (insert-i i lst)
  (cond ((null? lst) (list i))
        ((<= (car i) (car (car lst))) (cons i lst))
        (else (cons (car lst) (insert-i i (cdr lst))))
        )
  )

(define (insertion-sort-intervals l)
  (if (< (length l) 1)
      l
      (insert-i (car l) (insertion-sort-intervals (cdr l)))
      )
  )

(define (longest-interval-subsets l)
  (insertion-sort-intervals
   (filter (lambda (x) (is-subset x (largest-interval l)))
           l
           )
   )
  )

(define (compose . fns)
  (cond ((null? fns) (lambda (x) x))
        (else (lambda (x) ((car fns)
                           ((compose (cdr fns)) x)))
              )
        )
  )